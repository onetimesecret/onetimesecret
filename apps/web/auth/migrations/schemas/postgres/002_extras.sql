-- ================================================================
-- Rodauth PostgreSQL Extended Schema - Additional Features
-- Extends 001_initial.sql with additional authentication features
-- Features: password history, email auth, WebAuthn, SMS 2FA, JWT, activity tracking
-- ================================================================

-- ================================================================
-- EXTENDED PASSWORD MANAGEMENT
-- ================================================================

-- Previous password hashes for password history/reuse prevention
CREATE TABLE account_previous_password_hashes (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    account_id BIGINT NOT NULL,
    password_hash VARCHAR NOT NULL,
    FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE
);

-- Password change timestamps
CREATE TABLE account_password_change_times (
    id BIGINT PRIMARY KEY,
    changed_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    FOREIGN KEY (id) REFERENCES accounts(id) ON DELETE CASCADE
);

-- ================================================================
-- EXTENDED EMAIL AUTHENTICATION
-- ================================================================

-- Email-based authentication tokens
CREATE TABLE account_email_auth_keys (
    id BIGINT PRIMARY KEY,
    key VARCHAR NOT NULL,
    deadline TIMESTAMPTZ NOT NULL DEFAULT (NOW() + INTERVAL '1 day'),
    email_last_sent TIMESTAMPTZ,
    FOREIGN KEY (id) REFERENCES accounts(id) ON DELETE CASCADE
);

-- Login change verification (email change)
CREATE TABLE account_login_change_keys (
    id BIGINT PRIMARY KEY,
    key VARCHAR NOT NULL,
    login VARCHAR NOT NULL,
    deadline TIMESTAMPTZ NOT NULL,
    FOREIGN KEY (id) REFERENCES accounts(id) ON DELETE CASCADE
);

-- ================================================================
-- EXTENDED SESSION MANAGEMENT
-- ================================================================

-- Basic session keys
CREATE TABLE account_session_keys (
    id BIGINT PRIMARY KEY,
    key VARCHAR NOT NULL,
    FOREIGN KEY (id) REFERENCES accounts(id) ON DELETE CASCADE
);

-- JWT refresh tokens
CREATE TABLE account_jwt_refresh_keys (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    account_id BIGINT NOT NULL,
    key VARCHAR NOT NULL,
    deadline TIMESTAMPTZ NOT NULL,
    FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE
);

-- ================================================================
-- EXTENDED MULTI-FACTOR AUTHENTICATION
-- ================================================================

-- SMS-based two-factor authentication
CREATE TABLE account_sms_codes (
    id BIGINT PRIMARY KEY,
    phone_number VARCHAR(20) NOT NULL,
    num_failures INTEGER NOT NULL DEFAULT 0,
    code VARCHAR(10) NOT NULL,
    code_issued_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    FOREIGN KEY (id) REFERENCES accounts(id) ON DELETE CASCADE
);

-- ================================================================
-- WEBAUTHN SUPPORT
-- ================================================================

-- WebAuthn user identifiers
CREATE TABLE account_webauthn_user_ids (
    id BIGINT PRIMARY KEY,
    webauthn_id VARCHAR NOT NULL,
    FOREIGN KEY (id) REFERENCES accounts(id) ON DELETE CASCADE
);

-- WebAuthn public keys and usage tracking
CREATE TABLE account_webauthn_keys (
    account_id BIGINT NOT NULL,
    webauthn_id VARCHAR NOT NULL,
    public_key VARCHAR NOT NULL,
    sign_count INTEGER NOT NULL DEFAULT 0,
    last_use TIMESTAMPTZ,
    PRIMARY KEY (account_id, webauthn_id),
    FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE
);

-- ================================================================
-- EXTENDED SECURITY AND MONITORING
-- ================================================================

-- Activity tracking and session expiration
CREATE TABLE account_activity_times (
    id BIGINT PRIMARY KEY,
    last_activity_at TIMESTAMPTZ,
    last_login_at TIMESTAMPTZ,
    expired_at TIMESTAMPTZ,
    FOREIGN KEY (id) REFERENCES accounts(id) ON DELETE CASCADE
);

-- ================================================================
-- INDEXES FOR PERFORMANCE (New tables only)
-- ================================================================

CREATE INDEX idx_jwt_refresh_keys_account_id ON account_jwt_refresh_keys(account_id);
CREATE INDEX idx_jwt_refresh_keys_deadline ON account_jwt_refresh_keys(deadline);
CREATE INDEX idx_previous_password_hashes_account_id ON account_previous_password_hashes(account_id);
CREATE INDEX idx_activity_times_last_activity ON account_activity_times(last_activity_at);
CREATE INDEX idx_email_auth_keys_deadline ON account_email_auth_keys(deadline);
CREATE INDEX idx_activity_times_last_login ON account_activity_times(last_login_at);

-- ================================================================
-- ADDITIONAL VIEWS
-- ================================================================

-- View for recent authentication events (last 30 days)
CREATE VIEW recent_auth_events AS
SELECT
    l.id,
    l.account_id,
    a.email,
    l.at,
    l.message,
    l.metadata
FROM account_authentication_audit_logs l
JOIN accounts a ON l.account_id = a.id
WHERE l.at >= NOW() - INTERVAL '30 days'
ORDER BY l.at DESC;

-- Enhanced account security overview with additional MFA options
CREATE VIEW account_security_overview_enhanced AS
SELECT
    a.id,
    a.email,
    s.name as status_name,
    CASE WHEN ph.id IS NOT NULL THEN 1 ELSE 0 END as has_password,
    CASE WHEN otpk.id IS NOT NULL THEN 1 ELSE 0 END as has_otp,
    CASE WHEN sc.id IS NOT NULL THEN 1 ELSE 0 END as has_sms,
    CASE WHEN wk.account_id IS NOT NULL THEN 1 ELSE 0 END as has_webauthn,
    COALESCE(session_count.count, 0) as active_sessions,
    at.last_login_at,
    COALESCE(lf.number, 0) as failed_attempts
FROM accounts a
JOIN account_statuses s ON a.status_id = s.id
LEFT JOIN account_password_hashes ph ON a.id = ph.id
LEFT JOIN account_otp_keys otpk ON a.id = otpk.id
LEFT JOIN account_sms_codes sc ON a.id = sc.id
LEFT JOIN account_webauthn_keys wk ON a.id = wk.account_id
LEFT JOIN account_activity_times at ON a.id = at.id
LEFT JOIN account_login_failures lf ON a.id = lf.id
LEFT JOIN (
    SELECT account_id, COUNT(*) as count
    FROM account_active_session_keys
    GROUP BY account_id
) session_count ON a.id = session_count.account_id;

-- ================================================================
-- ADDITIONAL FUNCTIONS AND TRIGGERS
-- ================================================================

-- Function to automatically update activity time on successful logins
CREATE OR REPLACE FUNCTION update_last_login_time()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.message ILIKE '%login%successful%' THEN
        INSERT INTO account_activity_times (account_id, last_login_at, last_activity_at)
        VALUES (NEW.account_id, NEW.at, NEW.at)
        ON CONFLICT (account_id)
        DO UPDATE SET
            last_login_at = NEW.at,
            last_activity_at = NEW.at;
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger to automatically update activity time on successful logins
CREATE TRIGGER trigger_update_last_login_time
    AFTER INSERT ON account_authentication_audit_logs
    FOR EACH ROW
    EXECUTE FUNCTION update_last_login_time();

-- Enhanced cleanup function for new token types
CREATE OR REPLACE FUNCTION cleanup_expired_tokens_extended()
RETURNS TRIGGER AS $$
BEGIN
    -- Clean up expired JWT refresh tokens
    DELETE FROM account_jwt_refresh_keys WHERE deadline < NOW();

    -- Clean up expired email auth keys
    DELETE FROM account_email_auth_keys WHERE deadline < NOW();

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger to clean up expired tokens (runs on JWT refresh key insert)
CREATE TRIGGER trigger_cleanup_expired_tokens_extended
    AFTER INSERT ON account_jwt_refresh_keys
    FOR EACH ROW
    EXECUTE FUNCTION cleanup_expired_tokens_extended();

-- Function to update session last_use timestamp
CREATE OR REPLACE FUNCTION update_session_last_use(
    p_account_id BIGINT,
    p_session_id VARCHAR
)
RETURNS VOID AS $$
BEGIN
    UPDATE account_active_session_keys
    SET last_use = NOW()
    WHERE account_id = p_account_id AND session_id = p_session_id;
END;
$$ LANGUAGE plpgsql;

-- ================================================================
-- ADDITIONAL MAINTENANCE FUNCTIONS
-- ================================================================

-- Function to clean up old audit logs (keep last 90 days)
CREATE OR REPLACE FUNCTION cleanup_old_audit_logs()
RETURNS INTEGER AS $$
DECLARE
    deleted_count INTEGER;
BEGIN
    DELETE FROM account_authentication_audit_logs
    WHERE at < NOW() - INTERVAL '90 days';

    GET DIAGNOSTICS deleted_count = ROW_COUNT;
    RETURN deleted_count;
END;
$$ LANGUAGE plpgsql;

-- Function to get account security summary
CREATE OR REPLACE FUNCTION get_account_security_summary(p_account_id BIGINT)
RETURNS TABLE(
    has_password BOOLEAN,
    has_otp BOOLEAN,
    has_sms BOOLEAN,
    has_webauthn BOOLEAN,
    active_sessions INTEGER,
    last_login TIMESTAMPTZ,
    failed_attempts INTEGER
) AS $$
BEGIN
    RETURN QUERY
    SELECT
        EXISTS(SELECT 1 FROM account_password_hashes WHERE id = p_account_id),
        EXISTS(SELECT 1 FROM account_otp_keys WHERE id = p_account_id),
        EXISTS(SELECT 1 FROM account_sms_codes WHERE id = p_account_id),
        EXISTS(SELECT 1 FROM account_webauthn_keys WHERE account_id = p_account_id),
        (SELECT COUNT(*)::INTEGER FROM account_active_session_keys WHERE account_id = p_account_id),
        (SELECT last_login_at FROM account_activity_times WHERE id = p_account_id),
        COALESCE((SELECT number FROM account_login_failures WHERE id = p_account_id), 0);
END;
$$ LANGUAGE plpgsql;

-- ================================================================
-- COMMENTS FOR NEW TABLES
-- ================================================================

COMMENT ON TABLE account_previous_password_hashes IS 'Previous password hashes for preventing reuse';
COMMENT ON TABLE account_password_change_times IS 'Timestamps of password changes';
COMMENT ON TABLE account_email_auth_keys IS 'Email-based authentication tokens';
COMMENT ON TABLE account_login_change_keys IS 'Tokens for verifying email/login changes';
COMMENT ON TABLE account_session_keys IS 'Basic session management keys';
COMMENT ON TABLE account_jwt_refresh_keys IS 'JWT refresh tokens with expiration';
COMMENT ON TABLE account_sms_codes IS 'SMS-based two-factor authentication codes';
COMMENT ON TABLE account_webauthn_user_ids IS 'WebAuthn user identifiers';
COMMENT ON TABLE account_webauthn_keys IS 'WebAuthn public keys and usage tracking';
COMMENT ON TABLE account_activity_times IS 'Activity tracking and session expiration';

COMMENT ON VIEW recent_auth_events IS 'Authentication events from the last 30 days';
COMMENT ON VIEW account_security_overview_enhanced IS 'Enhanced security overview with MFA status and session counts';

COMMENT ON FUNCTION update_last_login_time() IS 'Automatically updates activity times on successful login';
COMMENT ON FUNCTION cleanup_expired_tokens_extended() IS 'Removes expired tokens for new token types';
COMMENT ON FUNCTION update_session_last_use(BIGINT, VARCHAR) IS 'Updates the last_use timestamp for an active session';
COMMENT ON FUNCTION cleanup_old_audit_logs() IS 'Removes audit logs older than 90 days';
COMMENT ON FUNCTION get_account_security_summary(BIGINT) IS 'Returns security status summary for an account';

-- ================================================================
-- USAGE EXAMPLES FOR NEW FEATURES
-- ================================================================

/*
-- Example: Track password changes
INSERT INTO account_password_change_times (account_id, changed_at)
VALUES (1, NOW());

-- Example: Add previous password for history tracking
INSERT INTO account_previous_password_hashes (account_id, password_hash)
VALUES (1, '$2b$12$old_hash...');

-- Example: Get recent auth events
SELECT * FROM recent_auth_events WHERE account_id = 1 LIMIT 10;

-- Example: Get account security summary
SELECT * FROM get_account_security_summary(1);

-- Example: Find accounts with enhanced security features
SELECT * FROM account_security_overview_enhanced
WHERE has_sms = 1 OR has_webauthn = 1;

-- Example: Get password change history for account
SELECT changed_at FROM account_password_change_times
WHERE account_id = 1 ORDER BY changed_at DESC;

-- Example: Check for recent password reuse
SELECT COUNT(*) FROM account_previous_password_hashes
WHERE account_id = 1 AND password_hash = '$2b$12$...';

-- Example: Update session activity
SELECT update_session_last_use(1, 'session_abc123');

-- Example: Clean up old audit logs
SELECT cleanup_old_audit_logs();

-- Example: Cleanup expired email auth keys
DELETE FROM account_email_auth_keys WHERE deadline < NOW();
*/
