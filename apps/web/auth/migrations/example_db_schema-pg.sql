-- ================================================================
-- Rodauth PostgreSQL Database Schema (Updated)
-- Authentication and Account Management System
-- ================================================================

-- ================================================================
-- CORE TABLES
-- ================================================================

-- Account status lookup table
CREATE TABLE account_statuses (
    id INTEGER PRIMARY KEY,
    name VARCHAR NOT NULL UNIQUE
);

-- Main accounts table - core user accounts
CREATE TABLE accounts (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    email VARCHAR NOT NULL UNIQUE,
    status_id INTEGER NOT NULL,
    FOREIGN KEY (status_id) REFERENCES account_statuses(id)
);

-- ================================================================
-- PASSWORD MANAGEMENT
-- ================================================================

-- Current password hashes for accounts
CREATE TABLE account_password_hashes (
    account_id BIGINT PRIMARY KEY,
    password_hash VARCHAR NOT NULL,
    FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE
);

-- Previous password hashes for password history/reuse prevention
CREATE TABLE account_previous_password_hashes (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    account_id BIGINT NOT NULL,
    password_hash VARCHAR NOT NULL,
    FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE
);

-- Password change timestamps
CREATE TABLE account_password_change_times (
    account_id BIGINT PRIMARY KEY,
    changed_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE
);

-- Password reset tokens and expiration
CREATE TABLE account_password_reset_keys (
    account_id BIGINT PRIMARY KEY,
    key VARCHAR NOT NULL,
    deadline TIMESTAMPTZ NOT NULL,
    email_last_sent TIMESTAMPTZ,
    FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE
);

-- ================================================================
-- ACCOUNT VERIFICATION AND EMAIL AUTHENTICATION
-- ================================================================

-- Email verification tokens for new accounts
CREATE TABLE account_verification_keys (
    account_id BIGINT PRIMARY KEY,
    key VARCHAR NOT NULL,
    requested_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    email_last_sent TIMESTAMPTZ,
    FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE
);

-- Email-based authentication tokens
CREATE TABLE account_email_auth_keys (
    account_id BIGINT PRIMARY KEY,
    key VARCHAR NOT NULL,
    deadline TIMESTAMPTZ NOT NULL,
    email_last_sent TIMESTAMPTZ,
    FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE
);

-- Login change verification (email change)
CREATE TABLE account_login_change_keys (
    account_id BIGINT PRIMARY KEY,
    key VARCHAR NOT NULL,
    login VARCHAR NOT NULL,
    deadline TIMESTAMPTZ NOT NULL,
    FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE
);

-- ================================================================
-- SESSION MANAGEMENT
-- ================================================================

-- Basic session keys
CREATE TABLE account_session_keys (
    account_id BIGINT PRIMARY KEY,
    key VARCHAR NOT NULL,
    FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE
);

-- Remember me functionality
CREATE TABLE account_remember_keys (
    account_id BIGINT PRIMARY KEY,
    key VARCHAR NOT NULL,
    deadline TIMESTAMPTZ NOT NULL,
    FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE
);

-- Active session tracking (FIXED: changed from TIME to TIMESTAMPTZ)
CREATE TABLE account_active_session_keys (
    account_id BIGINT NOT NULL,
    session_id VARCHAR NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    last_use TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    PRIMARY KEY (account_id, session_id),
    FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE
);

-- JWT refresh tokens
CREATE TABLE account_jwt_refresh_keys (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    account_id BIGINT NOT NULL,
    key VARCHAR NOT NULL,
    deadline TIMESTAMPTZ NOT NULL,
    FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE
);

-- ================================================================
-- MULTI-FACTOR AUTHENTICATION
-- ================================================================

-- TOTP/OTP keys and failure tracking
CREATE TABLE account_otp_keys (
    account_id BIGINT PRIMARY KEY,
    key VARCHAR NOT NULL,
    num_failures INTEGER NOT NULL DEFAULT 0,
    last_use TIMESTAMPTZ,
    FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE
);

-- SMS-based two-factor authentication
CREATE TABLE account_sms_codes (
    account_id BIGINT PRIMARY KEY,
    phone_number VARCHAR NOT NULL,
    num_failures INTEGER NOT NULL DEFAULT 0,
    code VARCHAR NOT NULL,
    code_issued_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE
);

-- Recovery codes for account recovery
CREATE TABLE account_recovery_codes (
    account_id BIGINT NOT NULL,
    code VARCHAR NOT NULL,
    PRIMARY KEY (account_id, code),
    FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE
);

-- ================================================================
-- WEBAUTHN SUPPORT
-- ================================================================

-- WebAuthn user identifiers
CREATE TABLE account_webauthn_user_ids (
    account_id BIGINT PRIMARY KEY,
    webauthn_id VARCHAR NOT NULL,
    FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE
);

-- WebAuthn public keys and usage tracking
CREATE TABLE account_webauthn_keys (
    account_id BIGINT NOT NULL,
    webauthn_id VARCHAR NOT NULL,
    public_key VARCHAR NOT NULL,
    sign_count INTEGER NOT NULL DEFAULT 0,
    last_use TIMESTAMPTZ,
    PRIMARY KEY (account_id, webauthn_id),
    FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE
);

-- ================================================================
-- SECURITY AND MONITORING
-- ================================================================

-- Failed login attempt tracking
CREATE TABLE account_login_failures (
    account_id BIGINT PRIMARY KEY,
    number INTEGER NOT NULL DEFAULT 0,
    FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE
);

-- Account lockout management
CREATE TABLE account_lockouts (
    account_id BIGINT PRIMARY KEY,
    key VARCHAR NOT NULL,
    deadline TIMESTAMPTZ NOT NULL,
    email_last_sent TIMESTAMPTZ,
    FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE
);

-- Activity tracking and session expiration
CREATE TABLE account_activity_times (
    account_id BIGINT PRIMARY KEY,
    last_activity_at TIMESTAMPTZ,
    last_login_at TIMESTAMPTZ,
    expired_at TIMESTAMPTZ,
    FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE
);

-- Authentication audit logging
CREATE TABLE account_authentication_audit_logs (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    account_id BIGINT NOT NULL,
    at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    message VARCHAR NOT NULL,
    metadata JSONB,
    FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE
);

-- ================================================================
-- INDEXES FOR PERFORMANCE
-- ================================================================

-- Essential indexes for common queries
CREATE INDEX idx_accounts_email ON accounts(email);
CREATE INDEX idx_accounts_status_id ON accounts(status_id);
CREATE INDEX idx_auth_audit_logs_account_id ON account_authentication_audit_logs(account_id);
CREATE INDEX idx_auth_audit_logs_at ON account_authentication_audit_logs(at);
CREATE INDEX idx_jwt_refresh_keys_account_id ON account_jwt_refresh_keys(account_id);
CREATE INDEX idx_jwt_refresh_keys_deadline ON account_jwt_refresh_keys(deadline);
CREATE INDEX idx_previous_password_hashes_account_id ON account_previous_password_hashes(account_id);

-- Additional indexes for session management
CREATE INDEX idx_active_session_keys_last_use ON account_active_session_keys(last_use);
CREATE INDEX idx_activity_times_last_activity ON account_activity_times(last_activity_at);

-- ================================================================
-- INITIAL DATA
-- ================================================================

-- Common account statuses
INSERT INTO account_statuses (id, name) VALUES
    (1, 'Unverified'),
    (2, 'Verified'),
    (3, 'Closed');

-- ================================================================
-- UTILITY VIEWS (Adapted from SQLite3 version)
-- ================================================================

-- View to get accounts with readable status names
CREATE VIEW accounts_with_status AS
SELECT
    a.id,
    a.email,
    s.name as status_name,
    a.status_id
FROM accounts a
JOIN account_statuses s ON a.status_id = s.id;

-- View for recent authentication events (last 30 days)
CREATE VIEW recent_auth_events AS
SELECT
    l.id,
    l.account_id,
    a.email,
    l.at,
    l.message,
    l.metadata
FROM account_authentication_audit_logs l
JOIN accounts a ON l.account_id = a.id
WHERE l.at >= NOW() - INTERVAL '30 days'
ORDER BY l.at DESC;

-- View for active sessions with account details
CREATE VIEW active_sessions_with_accounts AS
SELECT
    s.account_id,
    a.email,
    s.session_id,
    s.created_at,
    s.last_use,
    EXTRACT(EPOCH FROM (NOW() - s.last_use)) / 60 AS minutes_since_last_use
FROM account_active_session_keys s
JOIN accounts a ON s.account_id = a.id
ORDER BY s.last_use DESC;

-- ================================================================
-- POSTGRESQL FUNCTIONS AND TRIGGERS (Adapted from SQLite3 version)
-- ================================================================

-- Function to automatically update activity time on successful logins
CREATE OR REPLACE FUNCTION update_last_login_time()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.message ILIKE '%login%successful%' THEN
        INSERT INTO account_activity_times (account_id, last_login_at, last_activity_at)
        VALUES (NEW.account_id, NEW.at, NEW.at)
        ON CONFLICT (account_id)
        DO UPDATE SET
            last_login_at = NEW.at,
            last_activity_at = NEW.at;
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger to automatically update activity time on successful logins
CREATE TRIGGER trigger_update_last_login_time
    AFTER INSERT ON account_authentication_audit_logs
    FOR EACH ROW
    EXECUTE FUNCTION update_last_login_time();

-- Function to clean up expired tokens
CREATE OR REPLACE FUNCTION cleanup_expired_tokens()
RETURNS TRIGGER AS $$
BEGIN
    -- Clean up expired JWT refresh tokens
    DELETE FROM account_jwt_refresh_keys WHERE deadline < NOW();

    -- Clean up expired password reset keys
    DELETE FROM account_password_reset_keys WHERE deadline < NOW();

    -- Clean up expired email auth keys
    DELETE FROM account_email_auth_keys WHERE deadline < NOW();

    -- Clean up expired remember keys
    DELETE FROM account_remember_keys WHERE deadline < NOW();

    -- Clean up expired lockouts
    DELETE FROM account_lockouts WHERE deadline < NOW();

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger to clean up expired tokens (runs on JWT refresh key insert)
CREATE TRIGGER trigger_cleanup_expired_tokens
    AFTER INSERT ON account_jwt_refresh_keys
    FOR EACH ROW
    EXECUTE FUNCTION cleanup_expired_tokens();

-- Function to update session last_use timestamp
CREATE OR REPLACE FUNCTION update_session_last_use(
    p_account_id BIGINT,
    p_session_id VARCHAR
)
RETURNS VOID AS $$
BEGIN
    UPDATE account_active_session_keys
    SET last_use = NOW()
    WHERE account_id = p_account_id AND session_id = p_session_id;
END;
$$ LANGUAGE plpgsql;

-- ================================================================
-- MAINTENANCE FUNCTIONS
-- ================================================================

-- Function to clean up old audit logs (keep last 90 days)
CREATE OR REPLACE FUNCTION cleanup_old_audit_logs()
RETURNS INTEGER AS $$
DECLARE
    deleted_count INTEGER;
BEGIN
    DELETE FROM account_authentication_audit_logs
    WHERE at < NOW() - INTERVAL '90 days';

    GET DIAGNOSTICS deleted_count = ROW_COUNT;
    RETURN deleted_count;
END;
$$ LANGUAGE plpgsql;

-- Function to get account security summary
CREATE OR REPLACE FUNCTION get_account_security_summary(p_account_id BIGINT)
RETURNS TABLE(
    has_password BOOLEAN,
    has_otp BOOLEAN,
    has_sms BOOLEAN,
    has_webauthn BOOLEAN,
    active_sessions INTEGER,
    last_login TIMESTAMPTZ,
    failed_attempts INTEGER
) AS $$
BEGIN
    RETURN QUERY
    SELECT
        EXISTS(SELECT 1 FROM account_password_hashes WHERE account_id = p_account_id),
        EXISTS(SELECT 1 FROM account_otp_keys WHERE account_id = p_account_id),
        EXISTS(SELECT 1 FROM account_sms_codes WHERE account_id = p_account_id),
        EXISTS(SELECT 1 FROM account_webauthn_keys WHERE account_id = p_account_id),
        (SELECT COUNT(*)::INTEGER FROM account_active_session_keys WHERE account_id = p_account_id),
        (SELECT last_login_at FROM account_activity_times WHERE account_id = p_account_id),
        COALESCE((SELECT number FROM account_login_failures WHERE account_id = p_account_id), 0);
END;
$$ LANGUAGE plpgsql;

-- ================================================================
-- COMMENTS AND DOCUMENTATION
-- ================================================================

COMMENT ON TABLE accounts IS 'Core user accounts table';
COMMENT ON TABLE account_statuses IS 'Account status lookup (unverified, verified, closed)';
COMMENT ON TABLE account_password_hashes IS 'Current password hashes for accounts';
COMMENT ON TABLE account_previous_password_hashes IS 'Previous password hashes for preventing reuse';
COMMENT ON TABLE account_password_change_times IS 'Timestamps of password changes';
COMMENT ON TABLE account_password_reset_keys IS 'Password reset tokens and expiration times';
COMMENT ON TABLE account_verification_keys IS 'Email verification tokens for new accounts';
COMMENT ON TABLE account_email_auth_keys IS 'Email-based authentication tokens';
COMMENT ON TABLE account_login_change_keys IS 'Tokens for verifying email/login changes';
COMMENT ON TABLE account_session_keys IS 'Basic session management keys';
COMMENT ON TABLE account_remember_keys IS 'Remember me functionality tokens';
COMMENT ON TABLE account_active_session_keys IS 'Active session tracking with full timestamps (FIXED)';
COMMENT ON TABLE account_jwt_refresh_keys IS 'JWT refresh tokens with expiration';
COMMENT ON TABLE account_otp_keys IS 'TOTP/OTP keys and failure tracking';
COMMENT ON TABLE account_sms_codes IS 'SMS-based two-factor authentication codes';
COMMENT ON TABLE account_recovery_codes IS 'Recovery codes for account recovery';
COMMENT ON TABLE account_webauthn_user_ids IS 'WebAuthn user identifiers';
COMMENT ON TABLE account_webauthn_keys IS 'WebAuthn public keys and usage tracking';
COMMENT ON TABLE account_login_failures IS 'Failed login attempt tracking';
COMMENT ON TABLE account_lockouts IS 'Account lockout management';
COMMENT ON TABLE account_activity_times IS 'Activity tracking and session expiration';
COMMENT ON TABLE account_authentication_audit_logs IS 'Comprehensive authentication event logging';

-- View comments
COMMENT ON VIEW accounts_with_status IS 'Accounts joined with readable status names';
COMMENT ON VIEW recent_auth_events IS 'Authentication events from the last 30 days';
COMMENT ON VIEW active_sessions_with_accounts IS 'Active sessions with account details and activity metrics';

-- Function comments
COMMENT ON FUNCTION update_last_login_time() IS 'Automatically updates activity times on successful login';
COMMENT ON FUNCTION cleanup_expired_tokens() IS 'Removes expired tokens across all token tables';
COMMENT ON FUNCTION update_session_last_use(BIGINT, VARCHAR) IS 'Updates the last_use timestamp for an active session';
COMMENT ON FUNCTION cleanup_old_audit_logs() IS 'Removes audit logs older than 90 days';
COMMENT ON FUNCTION get_account_security_summary(BIGINT) IS 'Returns security status summary for an account';

-- ================================================================
-- USAGE EXAMPLES
-- ================================================================

/*
-- Example: Create a new account
INSERT INTO accounts (email, status_id) VALUES ('user@example.com', 1);

-- Example: Set password hash
INSERT INTO account_password_hashes (account_id, password_hash)
VALUES (currval('accounts_id_seq'), '$2b$12$...');

-- Example: Query accounts with status
SELECT * FROM accounts_with_status WHERE status_name = 'Verified';

-- Example: Check if email exists
SELECT COUNT(*) FROM accounts WHERE email = 'user@example.com';

-- Example: Get recent login attempts for account
SELECT * FROM recent_auth_events
WHERE account_id = 1 AND message ILIKE '%login%'
ORDER BY at DESC LIMIT 10;

-- Example: Get account security summary
SELECT * FROM get_account_security_summary(1);

-- Example: Update session activity (call from application)
SELECT update_session_last_use(1, 'session_abc123');

-- Example: View active sessions
SELECT * FROM active_sessions_with_accounts WHERE minutes_since_last_use < 30;

-- Example: Clean up old audit logs (maintenance)
SELECT cleanup_old_audit_logs(); -- Returns number of deleted records

-- Example: Manual cleanup of expired tokens
DELETE FROM account_remember_keys WHERE deadline < NOW();
DELETE FROM account_password_reset_keys WHERE deadline < NOW();
DELETE FROM account_email_auth_keys WHERE deadline < NOW();
*/
