-- ================================================================
-- Rodauth PostgreSQL Database Schema
-- Authentication and Account Management System
-- ================================================================

-- ================================================================
-- CORE TABLES
-- ================================================================

-- Account status lookup table
CREATE TABLE account_statuses (
    id INTEGER PRIMARY KEY,
    name VARCHAR NOT NULL UNIQUE
);

-- Main accounts table - core user accounts
CREATE TABLE accounts (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    email VARCHAR NOT NULL UNIQUE,
    status_id INTEGER NOT NULL,
    FOREIGN KEY (status_id) REFERENCES account_statuses(id)
);

-- ================================================================
-- PASSWORD MANAGEMENT
-- ================================================================

-- Current password hashes for accounts
CREATE TABLE account_password_hashes (
    account_id BIGINT PRIMARY KEY,
    password_hash VARCHAR NOT NULL,
    FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE
);

-- Previous password hashes for password history/reuse prevention
CREATE TABLE account_previous_password_hashes (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    account_id BIGINT NOT NULL,
    password_hash VARCHAR NOT NULL,
    FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE
);

-- Password change timestamps
CREATE TABLE account_password_change_times (
    account_id BIGINT PRIMARY KEY,
    changed_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE
);

-- Password reset tokens and expiration
CREATE TABLE account_password_reset_keys (
    account_id BIGINT PRIMARY KEY,
    key VARCHAR NOT NULL,
    deadline TIMESTAMPTZ NOT NULL,
    email_last_sent TIMESTAMPTZ,
    FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE
);

-- ================================================================
-- ACCOUNT VERIFICATION AND EMAIL AUTHENTICATION
-- ================================================================

-- Email verification tokens for new accounts
CREATE TABLE account_verification_keys (
    account_id BIGINT PRIMARY KEY,
    key VARCHAR NOT NULL,
    requested_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    email_last_sent TIMESTAMPTZ,
    FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE
);

-- Email-based authentication tokens
CREATE TABLE account_email_auth_keys (
    account_id BIGINT PRIMARY KEY,
    key VARCHAR NOT NULL,
    deadline TIMESTAMPTZ NOT NULL,
    email_last_sent TIMESTAMPTZ,
    FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE
);

-- Login change verification (email change)
CREATE TABLE account_login_change_keys (
    account_id BIGINT PRIMARY KEY,
    key VARCHAR NOT NULL,
    login VARCHAR NOT NULL,
    deadline TIMESTAMPTZ NOT NULL,
    FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE
);

-- ================================================================
-- SESSION MANAGEMENT
-- ================================================================

-- Basic session keys
CREATE TABLE account_session_keys (
    account_id BIGINT PRIMARY KEY,
    key VARCHAR NOT NULL,
    FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE
);

-- Remember me functionality
CREATE TABLE account_remember_keys (
    account_id BIGINT PRIMARY KEY,
    key VARCHAR NOT NULL,
    deadline TIMESTAMPTZ NOT NULL,
    FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE
);

-- Active session tracking
CREATE TABLE account_active_session_keys (
    account_id BIGINT NOT NULL,
    session_id VARCHAR NOT NULL,
    created_at TIMESTAMPTZ NOT NULL,
    last_use TIMESTAMPTZ NOT NULL,
    PRIMARY KEY (account_id, session_id),
    FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE
);

-- JWT refresh tokens
CREATE TABLE account_jwt_refresh_keys (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    account_id BIGINT NOT NULL,
    key VARCHAR NOT NULL,
    deadline TIMESTAMPTZ NOT NULL,
    FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE
);

-- ================================================================
-- MULTI-FACTOR AUTHENTICATION
-- ================================================================

-- TOTP/OTP keys and failure tracking
CREATE TABLE account_otp_keys (
    account_id BIGINT PRIMARY KEY,
    key VARCHAR NOT NULL,
    num_failures INTEGER NOT NULL DEFAULT 0,
    last_use TIME,
    FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE
);

-- SMS-based two-factor authentication
CREATE TABLE account_sms_codes (
    account_id BIGINT PRIMARY KEY,
    phone_number VARCHAR NOT NULL,
    num_failures INTEGER NOT NULL DEFAULT 0,
    code VARCHAR NOT NULL,
    code_issued_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE
);

-- Recovery codes for account recovery
CREATE TABLE account_recovery_codes (
    account_id BIGINT NOT NULL,
    code VARCHAR NOT NULL,
    PRIMARY KEY (account_id, code),
    FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE
);

-- ================================================================
-- WEBAUTHN SUPPORT
-- ================================================================

-- WebAuthn user identifiers
CREATE TABLE account_webauthn_user_ids (
    account_id BIGINT PRIMARY KEY,
    webauthn_id VARCHAR NOT NULL,
    FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE
);

-- WebAuthn public keys and usage tracking
CREATE TABLE account_webauthn_keys (
    account_id BIGINT NOT NULL,
    webauthn_id VARCHAR NOT NULL,
    public_key VARCHAR NOT NULL,
    sign_count INTEGER NOT NULL DEFAULT 0,
    last_use TIME,
    PRIMARY KEY (account_id, webauthn_id),
    FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE
);

-- ================================================================
-- SECURITY AND MONITORING
-- ================================================================

-- Failed login attempt tracking
CREATE TABLE account_login_failures (
    account_id BIGINT PRIMARY KEY,
    number INTEGER NOT NULL DEFAULT 0,
    FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE
);

-- Account lockout management
CREATE TABLE account_lockouts (
    account_id BIGINT PRIMARY KEY,
    key VARCHAR NOT NULL,
    deadline TIMESTAMPTZ NOT NULL,
    email_last_sent TIMESTAMPTZ,
    FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE
);

-- Activity tracking and session expiration
CREATE TABLE account_activity_times (
    account_id BIGINT PRIMARY KEY,
    last_activity_at TIMESTAMPTZ,
    last_login_at TIMESTAMPTZ,
    expired_at TIMESTAMPTZ,
    FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE
);

-- Authentication audit logging
CREATE TABLE account_authentication_audit_logs (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    account_id BIGINT NOT NULL,
    at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    message VARCHAR NOT NULL,
    metadata JSONB,
    FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE
);

-- ================================================================
-- INDEXES FOR PERFORMANCE
-- ================================================================

-- Essential indexes for common queries
CREATE INDEX idx_accounts_email ON accounts(email);
CREATE INDEX idx_accounts_status_id ON accounts(status_id);
CREATE INDEX idx_auth_audit_logs_account_id ON account_authentication_audit_logs(account_id);
CREATE INDEX idx_auth_audit_logs_at ON account_authentication_audit_logs(at);
CREATE INDEX idx_jwt_refresh_keys_account_id ON account_jwt_refresh_keys(account_id);
CREATE INDEX idx_jwt_refresh_keys_deadline ON account_jwt_refresh_keys(deadline);
CREATE INDEX idx_previous_password_hashes_account_id ON account_previous_password_hashes(account_id);

-- ================================================================
-- INITIAL DATA
-- ================================================================

-- Common account statuses
INSERT INTO account_statuses (id, name) VALUES
    (1, 'Unverified'),
    (2, 'Verified'),
    (3, 'Closed');

-- ================================================================
-- COMMENTS AND DOCUMENTATION
-- ================================================================

COMMENT ON TABLE accounts IS 'Core user accounts table';
COMMENT ON TABLE account_statuses IS 'Account status lookup (unverified, verified, closed)';
COMMENT ON TABLE account_password_hashes IS 'Current password hashes for accounts';
COMMENT ON TABLE account_previous_password_hashes IS 'Previous password hashes for preventing reuse';
COMMENT ON TABLE account_password_change_times IS 'Timestamps of password changes';
COMMENT ON TABLE account_password_reset_keys IS 'Password reset tokens and expiration times';
COMMENT ON TABLE account_verification_keys IS 'Email verification tokens for new accounts';
COMMENT ON TABLE account_email_auth_keys IS 'Email-based authentication tokens';
COMMENT ON TABLE account_login_change_keys IS 'Tokens for verifying email/login changes';
COMMENT ON TABLE account_session_keys IS 'Basic session management keys';
COMMENT ON TABLE account_remember_keys IS 'Remember me functionality tokens';
COMMENT ON TABLE account_active_session_keys IS 'Active session tracking with timestamps';
COMMENT ON TABLE account_jwt_refresh_keys IS 'JWT refresh tokens with expiration';
COMMENT ON TABLE account_otp_keys IS 'TOTP/OTP keys and failure tracking';
COMMENT ON TABLE account_sms_codes IS 'SMS-based two-factor authentication codes';
COMMENT ON TABLE account_recovery_codes IS 'Recovery codes for account recovery';
COMMENT ON TABLE account_webauthn_user_ids IS 'WebAuthn user identifiers';
COMMENT ON TABLE account_webauthn_keys IS 'WebAuthn public keys and usage tracking';
COMMENT ON TABLE account_login_failures IS 'Failed login attempt tracking';
COMMENT ON TABLE account_lockouts IS 'Account lockout management';
COMMENT ON TABLE account_activity_times IS 'Activity tracking and session expiration';
COMMENT ON TABLE account_authentication_audit_logs IS 'Comprehensive authentication event logging';
