# apps/api/v2/routes
#
# Otto Advanced Routes - V2 API
# Using direct Logic class routing with authentication strategies

# Account Management
POST   /account/destroy                           V2::Logic::Account::DestroyAccount response=json auth=onetime_api
POST   /account/change-password                   V2::Logic::Account::UpdatePassword response=json auth=onetime_api
POST   /account/update-locale                     V2::Logic::Account::UpdateLocale response=json auth=onetime_api
POST   /account/apitoken                          V2::Logic::Account::GenerateAPIToken response=json auth=onetime_api csrf=exempt
GET    /account                                   V2::Logic::Account::GetAccount response=json auth=onetime_api

# Domain Management
POST   /domains/add                               V2::Logic::Domains::AddDomain response=json auth=onetime_api
POST   /domains/:domain/remove                    V2::Logic::Domains::RemoveDomain response=json auth=onetime_api
GET    /domains/:domain                           V2::Logic::Domains::GetDomain response=json auth=onetime_api
POST   /domains/:domain/verify                    V2::Logic::Domains::VerifyDomain response=json auth=onetime_api
PUT    /domains/:domain/brand                     V2::Logic::Domains::UpdateDomainBrand response=json auth=onetime_api
GET    /domains/:domain/brand                     V2::Logic::Domains::GetDomainBrand response=json auth=onetime_api
DELETE /domains/:domain/logo                      V2::Logic::Domains::RemoveDomainImage response=json auth=onetime_api
POST   /domains/:domain/logo                      V2::Logic::Domains::UpdateDomainImage response=json auth=onetime_api
GET    /domains/:domain/logo                      V2::Logic::Domains::GetDomainImage response=json auth=onetime_api
DELETE /domains/:domain/icon                      V2::Logic::Domains::RemoveDomainImage response=json auth=onetime_api
POST   /domains/:domain/icon                      V2::Logic::Domains::UpdateDomainImage response=json auth=onetime_api
GET    /domains/:domain/icon                      V2::Logic::Domains::GetDomainImage response=json auth=onetime_api
GET    /domains                                   V2::Logic::Domains::ListDomains response=json auth=onetime_api

# Secrets - Private (Authenticated)
GET    /receipt/recent                            V2::Logic::Secrets::ListMetadata response=json auth=onetime_api
POST   /receipt/:key/burn                         V2::Logic::Secrets::BurnSecret response=json auth=onetime_api
GET    /receipt/:key                              V2::Logic::Secrets::ShowMetadata response=json auth=onetime_api
GET    /private/recent                            V2::Logic::Secrets::ListMetadata response=json auth=onetime_api
POST   /private/:key/burn                         V2::Logic::Secrets::BurnSecret response=json auth=onetime_api
GET    /private/:key                              V2::Logic::Secrets::ShowMetadata response=json auth=onetime_api

# Secrets - Public (Anonymous allowed)
GET    /secret/:key                               V2::Logic::Secrets::ShowSecret response=json auth=onetime_optional
GET    /secret/:key/status                        V2::Logic::Secrets::ShowSecretStatus response=json auth=onetime_optional
POST   /secret/status                             V2::Logic::Secrets::ListSecretStatus response=json auth=onetime_optional
POST   /secret/:key/reveal                        V2::Logic::Secrets::RevealSecret response=json auth=onetime_optional csrf=exempt
POST   /secret/generate                           V2::Logic::Secrets::GenerateSecret response=json auth=onetime_optional csrf=exempt
POST   /secret/conceal                            V2::Logic::Secrets::ConcealSecret response=json auth=onetime_optional csrf=exempt

# OPTIONS preflight for CORS (public)
OPTIONS /secret/generate                          V2::Logic::Secrets::GenerateSecret response=json
OPTIONS /secret/conceal                           V2::Logic::Secrets::ConcealSecret response=json

# Meta/Public endpoints (static information uses class methods)
GET    /supported-locales                         V2::Logic::Meta.get_supported_locales response=json
GET    /status                                    V2::Logic::Meta.system_status response=json
GET    /version                                   V2::Logic::Meta.system_version response=json
POST   /feedback                                  V2::Logic::Meta::ReceiveFeedback response=json auth=onetime_optional

# Colonel/Admin endpoints
GET    /colonel/info                              V2::Logic::Colonel::GetColonelInfo response=json auth=onetime_colonel
GET    /colonel/stats                             V2::Logic::Colonel::GetColonelStats response=json auth=onetime_colonel

# OTTO ADVANCED ROUTES SYNTAX - QUICK REFERENCE
# ==============================================
#
# Added in v1.5.0+. Basic syntax:
#
# VERB /path Target param1=value1 param2=value2
#
# RESPONSE TYPES
# --------------
# response=json     - JSON API response
# response=view     - HTML view response
# response=redirect - HTTP redirect
# response=auto     - Content negotiation
#
# Examples:
# GET  /api/users    App#list_users response=json
# GET  /dashboard    App#dashboard response=view
# GET  /login        App#redirect response=redirect
# GET  /data         App#data response=auto
#
# CSRF PROTECTION
# ---------------
# csrf=exempt       - Skip CSRF protection (useful for APIs)
#
# Examples:
# POST /api/webhook  App#webhook csrf=exempt
# POST /settings     App#settings  # CSRF protected by default
#
# LOGIC CLASSES (NEW!)
# --------------------
# Route directly to a class (no . or # in target).
# Class gets: initialize(session, user, params, locale)
#
# Examples:
# GET  /logic/simple      SimpleLogic
# GET  /admin/panel       Admin::Panel
# POST /data/processor    DataProcessor response=json csrf=exempt
#
# MULTIPLE PARAMETERS
# -------------------
# Combine any parameters with spaces:
#
# GET  /api/admin    App#admin auth=role:admin response=json
# POST /api/secure   App#secure auth=authenticated response=json csrf=exempt
#
# NAMESPACED CLASSES
# ------------------
# Class methods:  Namespace::Class.method
# Instance methods: Namespace::Class#method
#
# Examples:
# GET  /v2/admin     V2::Admin.show response=view
# POST /modules/auth Modules::Auth#process response=json
#
# CUSTOM PARAMETERS
# -----------------
# Add your own key=value parameters:
#
# GET /config  App#config env=production debug=true
# GET /api/v1  App#api version=1.0 response=json
#
# PARAMETER RULES
# ---------------
# - Space-separated after the target
# - key=value format
# - Values can contain = signs: config=host=localhost
# - Bad params (no =) are ignored
# - Order doesn't matter
#
# COMMON PATTERNS
# ---------------
# # JSON API with CSRF exemption
# POST /api/data  App#data response=json csrf=exempt
#
# # Admin view with authentication
# GET /admin  App#admin auth=role:admin response=view
#
# # Logic class with JSON response
# POST /processor  DataProcessor response=json
#
# # Complex route with all features
# PUT /api/admin  App#update auth=role:admin response=json csrf=exempt
#
# ROUTE TARGETS
# -------------
# App.method       - Class method
# App#method       - Instance method
# LogicClass       - Logic class (new!)
# Namespace::Class - Namespaced targets
#
# That's it! Advanced routing in Otto is just adding parameters after your target.
