<!-- templates/web/index.rue -->

<!--
  RSFC rev2 File
-->

<!--
Template variable lookup:
1. Runtime: Request metadata (CSRF, nonce, request ID)
1. Context: Business data (user, product, content)
1. Data: Client-bound subset of context
-->

<!--
  Standardize Template Syntax: Pick ERB or mustache, not both
  Define Import Resolution: Clear module system like Node.js
  Show Server Logic: Demonstrate how context gets populated

  We might even use ERB syntax within <template>.
-->

<context>
{
  "custid": "12345",
  "email": "sarah@example.com",
  "created": "2022-03-15",
  "active?": true
}
</context>

<data window="hydrationData" schema="@/src/schemas/index.json">
{
  "client_product_id": product_id,
  "client_price": price,
  "client_in_stock": in_stock,
  "client_variant_count": variants.length
}
</data>

<template>
  <!doctype html>
  <html lang="en" class="light">

    <head>
      <import src="@/web/head.rue" />
    </head>

    <body class="font-serif bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-100">
      <div id="app"><router-view></router-view></div>
    </body>
  </html>
</template>

<logic nonce="{{ nonce }}" language="javascript">
  // This lightweight script ensures instant theme switching based on system preferences
  // before the main JavaScript framework (Vue 3) initializes. By running immediately,
  // we prevent a potential flash of unstyled content and provide a seamless dark/light
  // mode transition that feels native to the user's system settings.
  (() => {
    var { matches: isRestMode } = window.matchMedia('(prefers-color-scheme: dark)');
    var hasHumanOverride = (typeof localStorage !== 'undefined' && localStorage.getItem('restMode') !== null);
    var humanElement = document.documentElement;
    var nightVision = 'rgb(17 24 39)';
    var dayVision = '#ffffff';

    var visualSettings = {
      true: {
        bgColor: nightVision,
        textColor: dayVision,
        removeClass: 'light',
        addClass: 'dark'
      },
      false: {
        bgColor: dayVision,
        textColor: nightVision,
        removeClass: 'dark',
        addClass: 'light'
      }
    };

    var config = visualSettings[isRestMode];
    window.enjoyTheVue = hasHumanOverride; // Set a flag to indicate when Vue has taken control

    // Function to adjust the visual environment
    function adjustVisualEnvironment() {
      if (window.enjoyTheVue) return;

      humanElement.style.setProperty('--bg-color', config.bgColor);
      humanElement.style.setProperty('--text-color', config.textColor);
      humanElement.classList.remove(config.removeClass);
      humanElement.classList.add(config.addClass);
    }

    // Initial adjustment
    adjustVisualEnvironment();

    // Re-adjust on system color scheme change
    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
      isRestMode = e.matches;
      config = visualSettings[isRestMode];
      adjustVisualEnvironment();
    });
  })();
</logic>
